<div class="sidebar d-none col-12 col-md-3 d-lg-flex flex-column overflow-scroll mb-4 bg-body-tertiary">
  <div class="sticky-top mb-2 sidebar_menu_header d-flex align-items-center justify-content-between">
    <a href="<%= root_path %>" class="px-3 align-items-center mb-md-0 me-md-auto text-decoration-none text-dark-emphasis">
      <span class="fs-4">MyChat</span>
    </a>
    <span id="sidebar-cross" class="d-inline d-lg-none text-dark-emphasis">
      <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
      </svg>
    </span>
  </div>

  <%= turbo_stream_from "dialogues" %>
  <ul class="dialogues-list nav nav-pills flex-column vh-100"
      data-params-dialogue="<%= params[:dialogue_id] %>">
    <%= render @dialogues %>
  </ul>

  <%= render "dialogues/dialogue_icon" %>
</div>

<script>
  function applyActiveClass() {
    const dialogueList = document.querySelector(".nav[data-params-dialogue]");
    if (!dialogueList) return;

    const paramsDialogueId = parseInt(dialogueList.dataset.paramsDialogue, 10);

    dialogueList.querySelectorAll(".user_list_item").forEach((item) => {
      const dialogueId = parseInt(item.dataset.dialogueId, 10);

      if (paramsDialogueId === dialogueId) {
        item.classList.add("list_active_item");
        const link = item.querySelector(".user_list_link");
        if (link) {
          link.classList.add("link-secondary");
        }
      } else {
        item.classList.remove("list_active_item");
        const link = item.querySelector(".user_list_link");
        if (link) {
          link.classList.remove("link-secondary");
        }
      }
    });
  }

  // Apply classes after page is fully loaded or after Turbo Streams
  document.addEventListener("turbo:load", () => {
    applyActiveClass();
  });

  document.addEventListener("turbo:render", () => {
    applyActiveClass();
  });

  // We are watching the changes in the list
  const observer = new MutationObserver(() => {
    applyActiveClass();
  });

  document.addEventListener("turbo:load", () => {
    const targetNode = document.querySelector(".nav[data-params-dialogue]");
    if (targetNode) {
      observer.observe(targetNode, { childList: true, subtree: true });
    }
  });
</script>