<%= form_for :message, class: "msg_form row col-12 d-flex align-items-center justify-content-center", html: { enctype: "multipart/form-data" } do |form| %>
  <%= form.hidden_field :replied_to_id, value: params[:replied_to_id] if params[:replied_to_id].present? %>

  <% if params[:replied_to_id].present? %>
    <div class="reply_new message_content rounded-end1 m-2 text-white d-flex justify-content-between">
      <small>
        <%= @replied_message %>
      </small>
      <%= link_to "#", id: "clear-reply", class: "text-white" do %>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
          <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
        </svg>
      <% end %>
    </div>
  <% end %>

  <div id="image-previews" class="mb-3 d-flex"></div> <!-- Container for image previews -->


  <div class="col-auto mb-3 d-flex justify-content-center align-items-center">
    <label for="image-upload" class="svg-upload-label">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-paperclip" viewBox="0 0 16 16">
        <path d="M4.5 3a2.5 2.5 0 0 1 5 0v9a1.5 1.5 0 0 1-3 0V5a.5.5 0 0 1 1 0v7a.5.5 0 0 0 1 0V3a1.5 1.5 0 1 0-3 0v9a2.5 2.5 0 0 0 5 0V5a.5.5 0 0 1 1 0v7a3.5 3.5 0 1 1-7 0z"/>
      </svg>
    </label>
    <%= form.file_field :images, multiple: true, id: "image-upload", class: "d-none", onchange: "previewImages(event)" %>
  </div>

  <div class="col-auto mb-3 col-10">
    <%= form.text_field :body, autofocus: true, class: "form-control form-control-lg message_area" %>
  </div>

  <div class="col-auto col-1">
    <%= form.submit "Send", class: "btn btn-success mb-3" %>
  </div>
<% end %>

<script>
  var objDiv = document.getElementById("messages");
  objDiv.scrollTop = objDiv.scrollHeight;

  document.addEventListener("turbo:load", () => {
    const replyClearButton = document.querySelector("#clear-reply");
    if (replyClearButton) {
      replyClearButton.addEventListener("click", (event) => {
        event.preventDefault(); // Prevent the default link behavior

        // Remove the replied_to_id parameter from the URL
        const url = new URL(window.location.href);
        url.searchParams.delete('replied_to_id'); // Delete the parameter from the query string
        history.replaceState(null, null, url.toString()); // Update the URL without reloading the page

        // Additionally, clear the reply block and input field
        const replyBlock = document.querySelector(".reply_new");
        const repliedToInput = document.querySelector("input[name='message[replied_to_id]']");
        
        if (replyBlock) replyBlock.remove();
        if (repliedToInput) repliedToInput.value = "";
      });
    }
  });

  function previewImages(event) {
    const previewContainer = document.getElementById('image-previews');
    previewContainer.innerHTML = ''; // Clearing the container before adding new images

    Array.from(event.target.files).forEach(file => {
      const reader = new FileReader();

      reader.onload = function(e) {
        const img = document.createElement('img');
        img.src = e.target.result;
        img.style.maxWidth = '100px';
        img.style.marginRight = '10px';
        img.classList.add('preview-image');

        // Create a button to cancel
        const cancelBtn = document.createElement('button');
        cancelBtn.innerText = 'X';
        cancelBtn.classList.add('btn', 'btn-secondary', 'btn-sm', 'cancel-btn');
        cancelBtn.onclick = function() {
          removePreview(img, cancelBtn, file);
        };

        // Create a container for the image and button
        const wrapper = document.createElement('div');
        wrapper.style.position = 'relative'; // To position a button over an image
        wrapper.style.display = 'inline-block'; // To make the images go next to each other

        // Add an image and a button
        wrapper.appendChild(img);
        wrapper.appendChild(cancelBtn);
        previewContainer.appendChild(wrapper);

        // Position the "X" button in the upper right corner
        cancelBtn.style.position = 'absolute';
        cancelBtn.style.top = '0';
        cancelBtn.style.right = '0';
        cancelBtn.style.zIndex = '10';
        cancelBtn.style.backgroundColor = 'rgba((134, 142, 150, 0.8)';
        cancelBtn.style.color = 'white';
        // cancelBtn.style.border = 'none';
        cancelBtn.style.borderRadius = '20%';
        cancelBtn.style.padding = '5px';
      };

      reader.readAsDataURL(file);
    });
  }

  function removePreview(img, cancelBtn, file) {
    const previewContainer = document.getElementById('image-previews');
    previewContainer.removeChild(img.parentElement);
    
    // Delete the file from the selection
    const input = document.getElementById('image-upload');
    const files = Array.from(input.files);
    const index = files.indexOf(file);
    if (index !== -1) {
      files.splice(index, 1);
    }
    input.files = new DataTransfer().files; // Updating the file list
    files.forEach(f => input.files.append(f)); // Добавляем оставшиеся файлы
  }
</script>
